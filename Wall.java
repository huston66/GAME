package jolie;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.util.ArrayList;

import jolie.WallNode.WALLSTYLE;

//画墙的类
public class Wall {
	static final int WIDTH=16;
	static final int HEIGHT=16;
	public static enum WALLTYPE {MAZE};
	
	//墙的位置
	public static int[][] MAZEMAP=
		{
			{WIDTH,0},{2*WIDTH,0},{3*WIDTH,0},{4*WIDTH,0},{5*WIDTH,0},{6*WIDTH,0},{7*WIDTH,0},{8*WIDTH,0},{9*WIDTH,0},{10*WIDTH,0},{11*WIDTH,0},{12*WIDTH,0},{13*WIDTH,0},{14*WIDTH,0},{15*WIDTH,0},
			{WIDTH,110},{2*WIDTH,110},{3*WIDTH,110},{4*WIDTH,110},{5*WIDTH,110},{6*WIDTH,110},{7*WIDTH,110},{8*WIDTH,110},{9*WIDTH,110},
			{WIDTH,110+HEIGHT},{WIDTH,110+2*HEIGHT},{WIDTH,110+3*HEIGHT},{WIDTH,110+4*HEIGHT},{WIDTH,110+5*HEIGHT},{WIDTH,110+6*HEIGHT},{WIDTH,110+7*HEIGHT},{WIDTH,110+8*HEIGHT},{WIDTH,110+9*HEIGHT},{WIDTH,110+10*HEIGHT},{WIDTH,110+11*HEIGHT},
			{15*WIDTH,HEIGHT},{15*WIDTH,2*HEIGHT},{15*WIDTH,3*HEIGHT},{15*WIDTH,4*HEIGHT},{15*WIDTH,5*HEIGHT},{15*WIDTH,6*HEIGHT},{15*WIDTH,7*HEIGHT},{15*WIDTH,8*HEIGHT},{15*WIDTH,9*HEIGHT},{15*WIDTH,10*HEIGHT},{15*WIDTH,11*HEIGHT},{15*WIDTH,12*HEIGHT},{15*WIDTH,13*HEIGHT},{15*WIDTH,14*HEIGHT},{15*WIDTH,15*HEIGHT},{15*WIDTH,16*HEIGHT},{15*WIDTH,17*HEIGHT},{15*WIDTH,18*HEIGHT},{15*WIDTH,19*HEIGHT},{15*WIDTH,20*HEIGHT},{15*WIDTH,21*HEIGHT},{15*WIDTH,22*HEIGHT},{15*WIDTH,23*HEIGHT},{15*WIDTH,24*HEIGHT},{15*WIDTH,25*HEIGHT},{15*WIDTH,26*HEIGHT},
			{9*WIDTH,110+HEIGHT},{9*WIDTH,110+2*HEIGHT},{9*WIDTH,110+3*HEIGHT},{9*WIDTH,110+11*HEIGHT},{9*WIDTH,110+12*HEIGHT},
			{WIDTH,110+12*HEIGHT},{2*WIDTH,110+12*HEIGHT},{3*WIDTH,110+12*HEIGHT},{4*WIDTH,110+12*HEIGHT},{5*WIDTH,110+12*HEIGHT},{6*WIDTH,110+12*HEIGHT},{7*WIDTH,110+12*HEIGHT},{8*WIDTH,110+12*HEIGHT},
			{WIDTH,110+13*HEIGHT},{WIDTH,110+14*HEIGHT},{WIDTH,110+15*HEIGHT},{WIDTH,110+16*HEIGHT},{WIDTH,110+17*HEIGHT},{WIDTH,110+18*HEIGHT},{WIDTH,110+19*HEIGHT},{WIDTH,110+20*HEIGHT},{WIDTH,110+21*HEIGHT},{WIDTH,110+22*HEIGHT},{WIDTH,110+23*HEIGHT},{WIDTH,110+24*HEIGHT},{WIDTH,110+25*HEIGHT},{WIDTH,110+26*HEIGHT},
			{2*WIDTH,110+26*HEIGHT},{3*WIDTH,110+26*HEIGHT},{4*WIDTH,110+26*HEIGHT},{5*WIDTH,110+26*HEIGHT},{6*WIDTH,110+26*HEIGHT},{7*WIDTH,110+26*HEIGHT},{8*WIDTH,110+26*HEIGHT},{9*WIDTH,110+26*HEIGHT},{10*WIDTH,110+26*HEIGHT},{11*WIDTH,110+26*HEIGHT},{12*WIDTH,110+26*HEIGHT},{13*WIDTH,110+26*HEIGHT},{14*WIDTH,110+26*HEIGHT},{15*WIDTH,110+26*HEIGHT},{16*WIDTH,110+26*HEIGHT},{17*WIDTH,110+26*HEIGHT},{18*WIDTH,110+26*HEIGHT},{19*WIDTH,110+26*HEIGHT},{20*WIDTH,110+26*HEIGHT},{21*WIDTH,110+26*HEIGHT},{22*WIDTH,110+26*HEIGHT},{23*WIDTH,110+26*HEIGHT},{24*WIDTH,110+26*HEIGHT},{25*WIDTH,110+26*HEIGHT},{26*WIDTH,110+26*HEIGHT},{27*WIDTH,110+26*HEIGHT},{28*WIDTH,110+26*HEIGHT},{29*WIDTH,110+26*HEIGHT},{30*WIDTH,110+26*HEIGHT},{31*WIDTH,110+26*HEIGHT},{32*WIDTH,110+26*HEIGHT},{33*WIDTH,110+26*HEIGHT},{34*WIDTH,110+26*HEIGHT},{35*WIDTH,110+26*HEIGHT},{36*WIDTH,110+26*HEIGHT},{37*WIDTH,110+26*HEIGHT},{38*WIDTH,110+26*HEIGHT},{39*WIDTH,110+26*HEIGHT},{40*WIDTH,110+26*HEIGHT},{41*WIDTH,110+26*HEIGHT},{42*WIDTH,110+26*HEIGHT},{43*WIDTH,110+26*HEIGHT},{44*WIDTH,110+26*HEIGHT},{45*WIDTH,110+26*HEIGHT},{46*WIDTH,110+26*HEIGHT},{47*WIDTH,110+26*HEIGHT},{48*WIDTH,110+26*HEIGHT},
			{16*WIDTH,26*HEIGHT},{17*WIDTH,26*HEIGHT},{18*WIDTH,26*HEIGHT},{19*WIDTH,26*HEIGHT},{20*WIDTH,26*HEIGHT},{21*WIDTH,26*HEIGHT},{22*WIDTH,26*HEIGHT},{23*WIDTH,26*HEIGHT},{24*WIDTH,26*HEIGHT},{25*WIDTH,26*HEIGHT},{26*WIDTH,26*HEIGHT},{27*WIDTH,26*HEIGHT},{28*WIDTH,26*HEIGHT},{29*WIDTH,26*HEIGHT},{30*WIDTH,26*HEIGHT},
			{30*WIDTH,25*HEIGHT},{30*WIDTH,24*HEIGHT},{30*WIDTH,23*HEIGHT},{30*WIDTH,22*HEIGHT},{30*WIDTH,21*HEIGHT},
			{31*WIDTH,21*HEIGHT},{32*WIDTH,21*HEIGHT},{33*WIDTH,21*HEIGHT},{34*WIDTH,21*HEIGHT},{35*WIDTH,21*HEIGHT},{36*WIDTH,21*HEIGHT},{37*WIDTH,21*HEIGHT},{38*WIDTH,21*HEIGHT},{39*WIDTH,21*HEIGHT},{40*WIDTH,21*HEIGHT},{41*WIDTH,21*HEIGHT},{42*WIDTH,21*HEIGHT},
			{42*WIDTH,20*HEIGHT},{42*WIDTH,19*HEIGHT},
			{55*WIDTH,110+25*HEIGHT},{55*WIDTH,110+24*HEIGHT},{55*WIDTH,110+23*HEIGHT},{55*WIDTH,110+22*HEIGHT},{55*WIDTH,110+21*HEIGHT},{55*WIDTH,110+20*HEIGHT},{55*WIDTH,110+19*HEIGHT},{55*WIDTH,110+18*HEIGHT},{55*WIDTH,110+17*HEIGHT},{55*WIDTH,110+16*HEIGHT},{55*WIDTH,110+15*HEIGHT},{55*WIDTH,110+14*HEIGHT},{55*WIDTH,110+13*HEIGHT},{48*WIDTH,110+12*HEIGHT},{48*WIDTH,110+11*HEIGHT},{48*WIDTH,110+10*HEIGHT},{48*WIDTH,110+9*HEIGHT},{48*WIDTH,110+8*HEIGHT},{48*WIDTH,110+7*HEIGHT},{48*WIDTH,110+6*HEIGHT},{48*WIDTH,110+5*HEIGHT},{48*WIDTH,110+4*HEIGHT},{48*WIDTH,110+3*HEIGHT},{48*WIDTH,110+2*HEIGHT},{48*WIDTH,110+HEIGHT},{48*WIDTH,110},
			{47*WIDTH,110+5*HEIGHT},{46*WIDTH,110+5*HEIGHT},{45*WIDTH,110+5*HEIGHT},{44*WIDTH,110+5*HEIGHT},{43*WIDTH,110+5*HEIGHT},{42*WIDTH,110+5*HEIGHT},{41*WIDTH,110+5*HEIGHT},{40*WIDTH,110+5*HEIGHT},{39*WIDTH,110+5*HEIGHT},{38*WIDTH,110+5*HEIGHT},{37*WIDTH,110+5*HEIGHT},
			{37*WIDTH,110+6*HEIGHT},{37*WIDTH,110+7*HEIGHT},
			{36*WIDTH,110+7*HEIGHT},{35*WIDTH,110+7*HEIGHT},{34*WIDTH,110+7*HEIGHT},{33*WIDTH,110+7*HEIGHT},{32*WIDTH,110+7*HEIGHT},{31*WIDTH,110+7*HEIGHT},{30*WIDTH,110+7*HEIGHT},{29*WIDTH,110+7*HEIGHT},{28*WIDTH,110+7*HEIGHT},{27*WIDTH,110+7*HEIGHT},{26*WIDTH,110+7*HEIGHT},{25*WIDTH,110+7*HEIGHT},{24*WIDTH,110+7*HEIGHT},{23*WIDTH,110+7*HEIGHT},{22*WIDTH,110+7*HEIGHT},{21*WIDTH,110+7*HEIGHT},
			{21*WIDTH,110+6*HEIGHT},{21*WIDTH,110+5*HEIGHT},{21*WIDTH,110+4*HEIGHT},{21*WIDTH,110+3*HEIGHT},{21*WIDTH,110+2*HEIGHT},{21*WIDTH,110+HEIGHT},{21*WIDTH,110},
			{16*WIDTH,0},{17*WIDTH,0},{18*WIDTH,0},{19*WIDTH,0},{20*WIDTH,0},{21*WIDTH,0},{22*WIDTH,0},{23*WIDTH,0},{24*WIDTH,0},{25*WIDTH,0},{26*WIDTH,0},{27*WIDTH,0},{28*WIDTH,0},{29*WIDTH,0},{30*WIDTH,0},{31*WIDTH,0},{32*WIDTH,0},{33*WIDTH,0},{34*WIDTH,0},{35*WIDTH,0},{36*WIDTH,0},{37*WIDTH,0},{38*WIDTH,0},{39*WIDTH,0},{40*WIDTH,0},{41*WIDTH,0},{42*WIDTH,0},{43*WIDTH,0},{44*WIDTH,0},{45*WIDTH,0},{46*WIDTH,0},{47*WIDTH,0},{48*WIDTH,0},{49*WIDTH,0},{50*WIDTH,0},{51*WIDTH,0},{52*WIDTH,0},{53*WIDTH,0},{54*WIDTH,0},{55*WIDTH,0},{56*WIDTH,0},{57*WIDTH,0},{58*WIDTH,0},{59*WIDTH,0},{60*WIDTH,0},{61*WIDTH,0},
			{26*WIDTH,HEIGHT},{26*WIDTH,2*HEIGHT},{26*WIDTH,3*HEIGHT},{26*WIDTH,4*HEIGHT},{26*WIDTH,5*HEIGHT},{26*WIDTH,6*HEIGHT},{26*WIDTH,7*HEIGHT},
			{27*WIDTH,7*HEIGHT},{28*WIDTH,7*HEIGHT},{29*WIDTH,7*HEIGHT},{30*WIDTH,7*HEIGHT},{31*WIDTH,7*HEIGHT},
			{49*WIDTH,110+26*HEIGHT},{50*WIDTH,110+26*HEIGHT},{51*WIDTH,110+26*HEIGHT},{52*WIDTH,110+26*HEIGHT},{53*WIDTH,110+26*HEIGHT},{54*WIDTH,110+26*HEIGHT},{55*WIDTH,110+26*HEIGHT},{56*WIDTH,110+26*HEIGHT},{57*WIDTH,110+26*HEIGHT},{58*WIDTH,110+26*HEIGHT},{59*WIDTH,110+26*HEIGHT},{60*WIDTH,110+26*HEIGHT},{61*WIDTH,110+26*HEIGHT},
			{61*WIDTH,HEIGHT},{61*WIDTH,2*HEIGHT},{61*WIDTH,3*HEIGHT},{61*WIDTH,4*HEIGHT},{61*WIDTH,5*HEIGHT},{61*WIDTH,6*HEIGHT},{61*WIDTH,7*HEIGHT},{61*WIDTH,8*HEIGHT},{61*WIDTH,9*HEIGHT},{61*WIDTH,10*HEIGHT},{61*WIDTH,11*HEIGHT},{61*WIDTH,12*HEIGHT},{61*WIDTH,13*HEIGHT},{61*WIDTH,14*HEIGHT},{61*WIDTH,15*HEIGHT},{61*WIDTH,16*HEIGHT},{61*WIDTH,17*HEIGHT},{61*WIDTH,18*HEIGHT},{61*WIDTH,19*HEIGHT},{61*WIDTH,20*HEIGHT},{61*WIDTH,21*HEIGHT},{61*WIDTH,22*HEIGHT},{61*WIDTH,23*HEIGHT},{61*WIDTH,24*HEIGHT},{61*WIDTH,25*HEIGHT},{61*WIDTH,26*HEIGHT},
			{55*WIDTH,110+12*HEIGHT},{54*WIDTH,110+12*HEIGHT},{53*WIDTH,110+12*HEIGHT},{52*WIDTH,110+12*HEIGHT},{51*WIDTH,110+12*HEIGHT},{50*WIDTH,110+12*HEIGHT},{49*WIDTH,110+12*HEIGHT},
		};
	
	//物品位置
	private static int[][] ITEMMAP=
		{
			{6*WIDTH,110+5*HEIGHT},{6*WIDTH,110+4*HEIGHT},{6*WIDTH,110+3*HEIGHT},{6*WIDTH,110+2*HEIGHT},{6*WIDTH,110+1*HEIGHT},
			{5*WIDTH,110+5*HEIGHT},{4*WIDTH,110+5*HEIGHT},{3*WIDTH,110+5*HEIGHT},{2*WIDTH,110+5*HEIGHT},
			{2*WIDTH,110+7*HEIGHT},{3*WIDTH,110+7*HEIGHT},{4*WIDTH,110+7*HEIGHT},{5*WIDTH,110+7*HEIGHT},{6*WIDTH,110+7*HEIGHT},
			{6*WIDTH,110+8*HEIGHT},{6*WIDTH,110+9*HEIGHT},{6*WIDTH,110+10*HEIGHT},{6*WIDTH,110+11*HEIGHT},
			{64+27*WIDTH,26*HEIGHT-2},{64+28*WIDTH,26*HEIGHT-2},
			{64+29*WIDTH,26*HEIGHT-2},{64+30*WIDTH,26*HEIGHT-2},
			{64+31*WIDTH,26*HEIGHT-2},{64+31*WIDTH,25*HEIGHT-2},
			{64+31*WIDTH,24*HEIGHT-2},{64+31*WIDTH,23*HEIGHT-2},
			{64+31*WIDTH,22*HEIGHT-2},
		};
	
	int x,y;
	
	boolean isLive;
	ArrayList<WallNode> wallNodesList=new ArrayList<WallNode>();
	Expedition ex;
	
	public Wall(int x,int y,WALLTYPE type,Expedition ex)
	{
		this.x=x;
		this.y=y;
		this.isLive=true;
		this.ex=ex;
		
		
		for(int i=0;i<ITEMMAP.length;i++)
		{
			wallNodesList.add(new WallNode(ITEMMAP[i][0]+x,ITEMMAP[i][1]+y,WALLSTYLE.CLAY));
		}
				
		for(int i=0;i<MAZEMAP.length;i++)
		{
			wallNodesList.add(new WallNode(MAZEMAP[i][0]+x,MAZEMAP[i][1]+y,WALLSTYLE.STEEL));
		}
		
	}
	
	
	//判断子弹是否碰墙
	public boolean isHit(Shot s)
	{
		WallNode wn=null;
		
		for(int i=0;i<wallNodesList.size();i++)
		{
			wn=wallNodesList.get(i);
			
			if(s.getRect().intersects(wn.getRect()))
			{
				if(wn.style==WALLSTYLE.CLAY)
				{
				wn.isLive=false;
				wallNodesList.remove(i);
				if(wallNodesList.size()==0)
				{
					this.isLive=false;
					this.ex.WallList.remove(this);
				}
				}
				return true;
			}
		}
		return false;
	}
	
	//判断碰墙
	public boolean isHits(Rectangle rect)
	{
		WallNode wn=null;
		for(int i=0;i<wallNodesList.size();i++)
		{
			wn=wallNodesList.get(i);
			
			if(rect.intersects(wn.getRect()))
			{
				return true;
			}
		}
		return false;
	}
	
	//画墙
	public void draw(Graphics g)
	{
		for(int i=0;i<wallNodesList.size();i++)
		{
			wallNodesList.get(i).draw(g);
		}
	}
}


//墙的类型
class WallNode
{
	public static enum WALLSTYLE {CLAY,STEEL};
	static Toolkit TLK=Toolkit.getDefaultToolkit();
	public static final Image[] img={
		TLK.getImage(WallNode.class.getClassLoader().getResource("Image/Wall/pink.png")),
		TLK.getImage(WallNode.class.getClassLoader().getResource("Image/Wall/steel.png"))
	};
	
	static final int WIDTH=16;
	static final int HEIGHT=16;
	int x,y;
	boolean isLive;
	WALLSTYLE style;
	
	public WallNode(int x,int y,WALLSTYLE style)
	{
		this.x=x;
		this.y=y;
		this.style=style;
		this.isLive=true;
	}
	
	//根据墙的类型来画
	public void draw(Graphics g)
	{
		if(isLive)
		{
			if(style==WALLSTYLE.CLAY)
			g.drawImage(img[0],x,y,null);
			else
			g.drawImage(img[1],x,y,null);
		}
	}
	
	public Rectangle getRect()
	{
		return new Rectangle(this.x-4,this.y,WIDTH,HEIGHT);
	}
}
